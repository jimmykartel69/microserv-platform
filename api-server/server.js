const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const admin = require('firebase-admin');
const bodyParser = require('body-parser');
require('dotenv').config();

// Gestion s√©curis√©e de l'initialisation Firebase
const initFirebaseAdmin = () => {
    // R√©cup√©ration des variables d'environnement
    const projectId = process.env.FIREBASE_PROJECT_ID;
    const clientEmail = process.env.FIREBASE_CLIENT_EMAIL;
    const privateKey = process.env.FIREBASE_PRIVATE_KEY 
        ? process.env.FIREBASE_PRIVATE_KEY.replace(/\\n/g, '\n').trim()
        : undefined;

    // Log d√©taill√© des variables d'environnement
    console.log('üîç Configuration Firebase:');
    console.log('Project ID:', projectId ? 'Pr√©sent' : 'MANQUANT');
    console.log('Client Email:', clientEmail ? 'Pr√©sent' : 'MANQUANT');
    console.log('Private Key:', privateKey ? 'Pr√©sent (partiellement masqu√©)' : 'MANQUANT');

    // Validation des variables
    if (!projectId || !clientEmail || !privateKey) {
        console.error('‚ùå Configuration Firebase incompl√®te');
        console.error('Variables manquantes:', {
            projectId: !!projectId,
            clientEmail: !!clientEmail,
            privateKey: !!privateKey
        });
        throw new Error('Configuration Firebase incompl√®te. V√©rifiez les variables d\'environnement.');
    }

    // Configuration de Firebase Admin
    const firebaseConfig = {
        credential: admin.credential.cert({
            projectId: projectId,
            clientEmail: clientEmail,
            privateKey: privateKey
        }),
        // Configuration de Firestore
        databaseURL: `https://${projectId}.firebaseio.com`
    };

    try {
        // V√©rifier si Firebase est d√©j√† initialis√©
        if (!admin.apps.length) {
            admin.initializeApp(firebaseConfig);
            console.log('‚úÖ Firebase Admin initialis√© avec succ√®s');
        }

        // Retourner l'instance de Firestore
        const db = admin.firestore();
        
        // Test de connexion √† Firestore
        console.log('üî¨ Test de connexion √† Firestore...');
        db.collection('test').get()
            .then(() => console.log('‚úÖ Connexion Firestore r√©ussie'))
            .catch(err => console.error('‚ùå √âchec de la connexion Firestore:', err));

        return db;
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'initialisation de Firebase Admin:', error);
        console.error('D√©tails de l\'erreur:', {
            name: error.name,
            message: error.message,
            stack: error.stack
        });
        throw error;
    }
};

// Initialisation de Firebase
let db;
try {
    db = initFirebaseAdmin();
} catch (error) {
    console.error('Impossible d\'initialiser Firebase:', error);
    process.exit(1);
}

const app = express();

// Middleware
app.use(helmet());
const corsOptions = {
    origin: [
        'http://localhost:3000', 
        'https://microserv.entrepixel.fr',
        'https://microserv-api.onrender.com'
    ],
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization']
};
app.use(cors(corsOptions));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Augmenter le timeout du serveur
app.use((req, res, next) => {
  res.setTimeout(120000); // 2 minutes
  next();
});

// Middleware d'authentification
const authenticateUser = async (req, res, next) => {
    try {
        console.log('üîê V√©rification de l\'authentification...');
        const authHeader = req.headers.authorization;
        
        if (!authHeader?.startsWith('Bearer ')) {
            console.log('‚ùå Token manquant dans les headers');
            return res.status(401).json({ error: 'Token manquant' });
        }

        const token = authHeader.split('Bearer ')[1];
        console.log('üîë Token re√ßu, v√©rification...');
        
        try {
            const decodedToken = await admin.auth().verifyIdToken(token);
            console.log('‚úÖ Token v√©rifi√© avec succ√®s pour l\'utilisateur:', decodedToken.uid);
            req.user = decodedToken;
            next();
        } catch (verifyError) {
            console.error('‚ùå Erreur lors de la v√©rification du token:', verifyError);
            res.status(401).json({ error: 'Token invalide' });
        }
    } catch (error) {
        console.error('‚ùå Erreur d\'authentification:', error);
        res.status(401).json({ error: 'Non autoris√©' });
    }
};

// Routes
app.get('/api/health', (req, res) => {
  res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

// Route pour r√©cup√©rer les r√©servations de l'utilisateur
app.get('/api/reservations', authenticateUser, async (req, res) => {
    try {
        console.log('üîç Requ√™te de r√©cup√©ration des r√©servations');
        console.log('Utilisateur authentifi√©:', req.user.uid);
        console.log('Param√®tres de requ√™te:', req.query);

        // V√©rifier si la connexion Firestore est √©tablie
        if (!db) {
            console.error('‚ùå Connexion Firestore non √©tablie');
            return res.status(500).json({ 
                success: false, 
                error: 'Connexion √† la base de donn√©es impossible' 
            });
        }

        try {
            // Construire la requ√™te Firestore
            const reservationsRef = db.collection('reservations');
            let query = reservationsRef
                .where('clientId', '==', req.user.uid)
                .orderBy('createdAt', 'desc');

            // Ajouter un filtre par providerId si fourni
            if (req.query.providerId) {
                console.log(`üîé Filtrage par providerId: ${req.query.providerId}`);
                query = query.where('providerId', '==', req.query.providerId);
            }

            console.log('Pr√©paration de la requ√™te Firestore');
            const snapshot = await query.get();

            console.log(`Nombre de documents trouv√©s: ${snapshot.docs.length}`);

            // Si aucune r√©servation trouv√©e
            if (snapshot.docs.length === 0) {
                console.log(`üîç Aucune r√©servation trouv√©e pour l'utilisateur ${req.user.uid}`);
                return res.status(200).json({
                    success: true,
                    message: 'Aucune r√©servation trouv√©e',
                    reservations: [],
                    hasReservations: false
                });
            }

            // Tableau pour stocker les r√©servations avec les d√©tails du service
            const reservations = [];

            // R√©cup√©rer les d√©tails de chaque service
            for (const doc of snapshot.docs) {
                const reservationData = doc.data();
                console.log('Donn√©es de r√©servation:', reservationData);
                
                try {
                    // R√©cup√©rer les d√©tails du service
                    const serviceRef = db.collection('services').doc(reservationData.serviceId);
                    const serviceDoc = await serviceRef.get();

                    // Ajouter les d√©tails du service √† la r√©servation
                    reservations.push({
                        id: doc.id,
                        ...reservationData,
                        service: serviceDoc.exists ? serviceDoc.data() : null
                    });
                } catch (serviceError) {
                    console.warn(`‚ö†Ô∏è Impossible de r√©cup√©rer le service pour la r√©servation ${doc.id}:`, serviceError);
                    
                    // Ajouter la r√©servation m√™me si le service n'est pas r√©cup√©r√©
                    reservations.push({
                        id: doc.id,
                        ...reservationData,
                        service: null
                    });
                }
            }

            console.log(`‚úÖ R√©cup√©ration de ${reservations.length} r√©servations`);

            res.status(200).json({
                success: true,
                message: 'R√©servations r√©cup√©r√©es avec succ√®s',
                reservations: reservations
            });

        } catch (queryError) {
            console.error('‚ùå Erreur lors de la requ√™te Firestore:', queryError);
            
            // Log d√©taill√© de l'erreur
            console.error('D√©tails de l\'erreur:', {
                name: queryError.name,
                message: queryError.message,
                code: queryError.code,
                stack: queryError.stack
            });

            res.status(500).json({
                success: false,
                error: 'Erreur lors de la r√©cup√©ration des r√©servations',
                details: queryError.message
            });
        }
    } catch (globalError) {
        console.error('‚ùå Erreur globale lors de la r√©cup√©ration des r√©servations:', globalError);
        
        res.status(500).json({
            success: false,
            error: 'Erreur interne du serveur',
            details: globalError.message
        });
    }
});

// Route pour cr√©er une r√©servation
app.post('/api/reservations', authenticateUser, async (req, res) => {
    try {
        console.log(' Requ√™te de r√©servation re√ßue');
        console.log('Donn√©es de la requ√™te:', JSON.stringify(req.body, null, 2));
        console.log('Utilisateur authentifi√©:', req.user.uid);

        // Validation des donn√©es d'entr√©e
        const { 
            serviceId, 
            providerId, 
            date, 
            startTime, 
            endTime, 
            totalPrice 
        } = req.body;

        // V√©rifications de base
        if (!serviceId || !providerId || !date || !startTime || !endTime) {
            console.error(' Donn√©es de r√©servation incompl√®tes');
            return res.status(400).json({ 
                success: false, 
                error: 'Donn√©es de r√©servation incompl√®tes' 
            });
        }

        // V√©rification de l'existence du service
        const serviceRef = db.collection('services').doc(serviceId);
        const serviceDoc = await serviceRef.get();

        if (!serviceDoc.exists) {
            console.error(` Service non trouv√©: ${serviceId}`);
            return res.status(404).json({ 
                success: false, 
                error: 'Service non trouv√©' 
            });
        }

        // V√©rification des disponibilit√©s
        const reservationsRef = db.collection('reservations');
        const conflictQuery = await reservationsRef
            .where('serviceId', '==', serviceId)
            .where('date', '==', date)
            .where('status', '!=', 'cancelled')
            .get();

        const conflictingReservations = conflictQuery.docs.filter(doc => {
            const reservation = doc.data();
            return !(
                (startTime >= reservation.endTime) || 
                (endTime <= reservation.startTime)
            );
        });

        if (conflictingReservations.length > 0) {
            console.error(' Cr√©neau d√©j√† r√©serv√©');
            return res.status(409).json({ 
                success: false, 
                error: 'Cr√©neau d√©j√† r√©serv√©' 
            });
        }

        // Cr√©ation de la r√©servation
        const newReservationRef = reservationsRef.doc();
        const reservationData = {
            id: newReservationRef.id,
            userId: req.user.uid,
            serviceId,
            providerId,
            date,
            startTime,
            endTime,
            totalPrice: Number(totalPrice) || 0,
            status: 'pending',
            createdAt: admin.firestore.FieldValue.serverTimestamp()
        };

        await newReservationRef.set(reservationData);

        console.log(` R√©servation cr√©√©e avec succ√®s: ${newReservationRef.id}`);

        res.status(201).json({ 
            success: true, 
            message: 'R√©servation cr√©√©e avec succ√®s',
            reservation: reservationData
        });

    } catch (error) {
        console.error(' Erreur lors de la cr√©ation de la r√©servation:', error);
        
        // Gestion des diff√©rents types d'erreurs
        if (error.code === 'permission-denied') {
            res.status(403).json({ 
                success: false, 
                error: 'Acc√®s non autoris√©' 
            });
        } else if (error.code === 'not-found') {
            res.status(404).json({ 
                success: false, 
                error: 'Ressource non trouv√©e' 
            });
        } else {
            res.status(500).json({ 
                success: false, 
                error: 'Erreur interne du serveur',
                details: error.message 
            });
        }
    }
});

// Middleware de gestion des erreurs globales
app.use((error, req, res, next) => {
  console.error('Erreur globale:', error);
  res.status(500).json({
    success: false,
    error: 'Une erreur inattendue est survenue'
  });
});

// Port
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Serveur d√©marr√© sur le port ${PORT}`);
});
